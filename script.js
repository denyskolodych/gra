let level = []; // –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ä—ñ–≤–Ω—è | array for storing level sizes
let score = 0; // –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ | initial score
let timeLeft = 420; // 7 —Ö–≤–∏–ª–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö | 7 minutes in seconds
let timerInterval; // –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ | variable for timer
let selected = []; // –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ | array for storing selected elements

const scoreElement = document.getElementsByClassName('score'); // –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É | element for displaying score
const buttons = document.getElementsByClassName('level-button'); // –∫–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω—ñ–≤ | level buttons
const board = document.getElementById('gameBoard'); // —ñ–≥—Ä–æ–≤–∞ –¥–æ—à–∫–∞ | game board
const playButton = document.getElementsByClassName('play'); // –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ | button to start the game
const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1'; // –º–∞—Å–∏–≤ –ª—ñ—Ç–µ—Ä –¥–ª—è –≥—Ä–∏ | array of letters for the game
let elements; // —ñ–≥—Ä–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ | game elements

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ | Level button handlers
buttons[0].onclick = () => {
  level = [6, 6]; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä—ñ–≤–µ–Ω—å 6x6 |  Sets level to 6x6
  buttonsHide(); // –ü—Ä–∏—Ö–æ–≤—É—î –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—ñ–≤ | Hides level selection buttons
  game(); // –ó–∞–ø—É—Å–∫–∞—î –≥—Ä—É
  playButton[0].style.display = 'block'; // –ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ | Shows the button to start the game
};

buttons[1].onclick = () => {
  level = [7, 6]; 
  board.style.width = '607px'; // –ó–º—ñ–Ω—é—î —à–∏—Ä–∏–Ω—É –¥–æ—à–∫–∏ | Changes the width of the board
  buttonsHide();
  game();
  playButton[0].style.display = 'block';
};

buttons[2].onclick = () => {
  level = [9, 6];
  board.style.width = '780px';
  buttonsHide();
  game();
  playButton[0].style.display = 'block';
};

// –ü—Ä–∏—Ö–æ–≤—É—î –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—ñ–≤ | Hides level selection buttons
function buttonsHide() {
  for (let i = 0; i < buttons.length; i++) {
    buttons[i].style.display = 'none';
  }
  document.querySelector('.level-buttons').style.display = 'none';

}

// –û–Ω–æ–≤–ª—é—î —Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–∂–Ω—ñ 10 –º—Å | Updates the score every 10 ms
setInterval(() => {
  scoreElement[0].textContent = "–†–∞—Ö—É–Ω–æ–∫: " + score;
}, 10);

// –ì–µ–Ω–µ—Ä—É—î –º–∞—Å–∏–≤ –ø–æ –¥–≤—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ –ª—ñ—Ç–µ—Ä–∏ | Generates an array with two identical letters
function generArrLetter(lete) {
  for (let i = 0; i < (level[0] * level[1]) / 2; i++) {
    lete.push(letters[i], letters[i]);
  }
}

// –ü–µ—Ä–µ–º—ñ—à—É—î –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ | Shuffles the array of elements
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function spawnElemts(letterArray) {
  for (let i = 0; i < level[0] * level[1]; i++) {
    const elem = document.createElement('div'); //—Å–≤—Ç–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç | creates a new element
    elem.classList.add('element', 'hidden', 'matched'); // –¥–æ–¥–∞—î –∫–ª–∞—Å–∏ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó | adds classes for styling
    elem.textContent = letterArray[i]; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –µ–ª–µ–º–µ–Ω—Ç–∞ | sets the text of the element
    board.appendChild(elem); // –¥–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç –Ω–∞ –¥–æ—à–∫—É | adds the element to the board
  }

  const elems = board.getElementsByClassName('element');  // –æ—Ç—Ä–∏–º—É—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∫–ª–∞—Å–æ–º 'element' | gets all elements with the class 'element'
  let left = 375; // –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –ª—ñ–≤–æ—Ä—É—á | initial left position
  let top = 80; // –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –∑–≤–µ—Ä—Ö—É | initial top position
  let rowOffset = 0;

  for (let i = 0; i < level[0] * level[1]; i++) {
    if (i % level[0] === 0 && i !== 0) { 
      left = 375; // —Å–∫–∏–¥–∞—î –ø–æ–∑–∏—Ü—ñ—é –ª—ñ–≤–æ—Ä—É—á | resets the left position
      top += 85; // –∑–±—ñ–ª—å—à—É—î –ø–æ–∑–∏—Ü—ñ—é –∑–≤–µ—Ä—Ö—É | increases the top position
      rowOffset = 0; // —Å–∫–∏–¥–∞—î –∑—Å—É–≤ —Ä—è–¥–∫–∞ | resets the row offset
    }
    elems[i].style.left = left + 85 * rowOffset + 'px'; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –ª—ñ–≤–æ—Ä—É—á | sets the left position
    elems[i].style.top = top + 'px'; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –∑–≤–µ—Ä—Ö—É | sets the top position
    rowOffset++; // –∑–±—ñ–ª—å—à—É—î –∑—Å—É–≤ —Ä—è–¥–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ | increases the row offset for the next element
  }

  elements = elems;
  return elems;
}


// –ó–º—ñ–Ω—é—î –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –µ–ª–µ–º–µ–Ω—Ç–∞ | Changes the background color of the element
function changeElementBg(element, color) {
  element.style.backgroundColor = color;
}

// –ó–Ω—ñ–º–∞—î –∫–ª–∞—Å matched —É –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ | Removes the matched class from all elements
function notMatch(elements) {
  for (let i = 0; i < elements.length; i++) {
    elements[i].classList.remove('matched');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≥—Ä–∏ | Main game logic
function mainInGame(elements) {
  let matchedPairs = 0; // –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø–∞—Ä | counter for found pairs
  const totalPairs = (level[0] * level[1]) / 2; // –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä | total number of pairs

  for (let i = 0; i < elements.length; i++) {
    elements[i].addEventListener('click', function () { // –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∫–ª—ñ–∫—É
      if (selected.length === 2 || this.classList.contains('matched') || selected.includes(this)) return; // —è–∫—â–æ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–æ 2 –µ–ª–µ–º–µ–Ω—Ç–∏ –∞–±–æ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç –≤–∂–µ –∑–Ω–∞–π–¥–µ–Ω–æ |   if already selected 2 elements or this element is already found

      this.classList.remove('hidden'); // –ø–æ–∫–∞–∑—É—î –µ–ª–µ–º–µ–Ω—Ç | shows the element
      changeElementBg(this, 'rgb(112, 0, 182)'); // –∑–º—ñ–Ω—é—î –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –µ–ª–µ–º–µ–Ω—Ç–∞ |  changes the background color of the element
      selected.push(this); // –¥–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç –¥–æ –º–∞—Å–∏–≤—É –≤–∏–±—Ä–∞–Ω–∏—Ö |  adds the element to the selected array

      if (selected.length === 2) { 
        setTimeout(() => { // –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é |   timeout before checking
          const [first, second] = selected; // –æ—Ç—Ä–∏–º—É—î –ø–µ—Ä—à–∏–π —ñ –¥—Ä—É–≥–∏–π –≤–∏–±—Ä–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ |   gets the first and second selected elements
          if (first.textContent === second.textContent) { // —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è | if the elements match
            changeElementBg(first, 'rgb(0, 255, 0)'); // –∑–º—ñ–Ω—é—î –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ | changes the background color of the first element
            changeElementBg(second, 'rgb(0, 255, 0)'); // –∑–º—ñ–Ω—é—î –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É –¥—Ä—É–≥–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ | changes the background color of the second element
            first.classList.remove('hidden'); // —Ä–æ–±–∏—Ç—å –π–æ–≥–æ —Ç–µ–∫—Å—Ç –≤–∏–¥–∏–º–∏–º | makes its text visible
            second.classList.remove('hidden');
            first.classList.add('matched'); // –¥–æ–¥–∞—î –∫–ª–∞—Å matched –¥–æ –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —â–æ–± –≤—ñ–Ω –Ω–µ –º—ñ–≥ –±—É—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π –∑–Ω–æ–≤—É | adds the matched class to the first element so it can't be selected again
            second.classList.add('matched');
            matchedPairs++; // –∑–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø–∞—Ä | increases the counter for found pairs
            score += 11; // –∑–±—ñ–ª—å—à—É—î —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ 11 | increases the score by 11

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É
            if (matchedPairs === totalPairs) {
              clearInterval(timerInterval); // –∑—É–ø–∏–Ω—è—î —Ç–∞–π–º–µ—Ä |   stops the timer
              document.getElementById('bgMusic').pause(); // –∑—É–ø–∏–Ω—è—î –º—É–∑–∏–∫—É | pauses the music
              const totalTime = 420 - timeLeft; // –æ–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≥—Ä–∏ | calculates the total game time
              timeLeft = 420; // —Å–∫–∏–¥–∞—î —á–∞—Å –≥—Ä–∏ | resets the game time

              const record = document.createElement('main'); // —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å—É |  creates a new element for the record
              record.classList.add('record'); 
              record.innerHTML = `
                <h2>üéâ –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!</h2>
                <p>‚úÖ –†–∞—Ö—É–Ω–æ–∫: <strong>${score}</strong></p>
                <p>‚è± –ß–∞—Å –≥—Ä–∏: <strong>${totalTime} —Å–µ–∫.</strong></p>
                <button onclick="restartGame()">üîÅ –ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
              `;
              document.body.appendChild(record);
              playButton[0].style.display = 'none';
            }
          } else {
            changeElementBg(first, 'rgb(144, 21, 231)'); //–Ø–∫—â–æ –Ω–µ –≤–≥–∞–¥–∞–Ω–æ —Ç–æ –ø–æ–≤–µ—Ä–Ω–∏ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É —Ç–∞ –∑—Ä–æ–±–∏ —Ç–µ–∫—Å—Ç –Ω–µ–≤–∏–¥–∏–º–∏–º | if not guessed, return the background color and make the text invisible
            changeElementBg(second, 'rgb(144, 21, 231)');
            first.classList.add('hidden');
            second.classList.add('hidden');
            if (score > 0) score -= 1; // –∑–º–µ–Ω—à—É—î —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ 1, —è–∫—â–æ –≤—ñ–Ω –±—ñ–ª—å—à–µ 0 | decreases the score by 1 if it is greater than 0
          }

          selected = [];
        }, 1000); // –∑–∞—Ç—Ä–∏–º–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –∑–±—ñ–≥—ñ–≤ |   timeout of 1 second before checking matches
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞—î —Ç–∞–π–º–µ—Ä
function startTimer() {
  clearInterval(timerInterval); // –æ—á–∏—â–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î | clears the previous timer if it exists
  timerInterval = setInterval(() => {
    const minutes = Math.floor(timeLeft / 60); // –æ–±—á–∏—Å–ª—é—î —Ö–≤–∏–ª–∏–Ω–∏ | calculates minutes
    const seconds = timeLeft % 60; // –æ–±—á–∏—Å–ª—é—î —Å–µ–∫—É–Ω–¥–∏ | calculates seconds
    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–∞–π–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ MM:SS | Displays the timer in MM:SS format

    document.getElementById("timer").textContent =
      `${minutes < 10 ? "0" : ""}${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;

    timeLeft--;

    if (timeLeft < 0) {
      clearInterval(timerInterval);
      document.getElementById("timer").textContent = "–ß–∞—Å –≤–∏–π—à–æ–≤!";
      clearInterval(timerInterval); // –∑—É–ø–∏–Ω—è—î —Ç–∞–π–º–µ—Ä | stops the timer
              document.getElementById('bgMusic').pause(); // –∑—É–ø–∏–Ω—è—î –º—É–∑–∏–∫—É | pauses the music
              const totalTime = 420 - timeLeft; // –æ–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≥—Ä–∏ | calculates the total game time
              timeLeft = 420; // —Å–∫–∏–¥–∞—î —á–∞—Å –≥—Ä–∏ | resets the game time

              const record = document.createElement('main'); // —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å—É |  creates a new element for the record
              record.classList.add('record'); 
              record.innerHTML = `
                <h2>üéâ –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏</h2>
                <p>‚úÖ –†–∞—Ö—É–Ω–æ–∫: <strong>${score}</strong></p>
                <p>‚è± –ß–∞—Å –≥—Ä–∏: <strong>${totalTime} —Å–µ–∫.</strong></p>
                <button onclick="restartGame()">üîÅ –ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
              `;
              document.body.appendChild(record);
              playButton[0].style.display = 'none';
    }
  }, 1000);

  notMatch(elements);
}

// –í—ñ–¥—Ç–≤–æ—Ä—é—î –º—É–∑–∏–∫—É —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î —Ç–∞–π–º–µ—Ä | Plays music and starts the timer
function playMusic() {
  setTimeout(() => {
    for(let i = 0;i<elements.length;i++) {
      elements[i].classList.remove('hidden'); // –ø—Ä–∏—Ö–æ–≤—É—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ | hides all elements
    }
  },500); 
  setTimeout(() => {
    setTimeout(() => {
    for(let i = 0;i<elements.length;i++) {
      elements[i].classList.add('hidden'); // –ø—Ä–∏—Ö–æ–≤—É—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ | hides all elements
    }
  },2000); 
  },); 
  const music = document.getElementById('bgMusic');
  music.play();
  music.volume = 0.07; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥—É—á–Ω—ñ—Å—Ç—å –º—É–∑–∏–∫–∏ | sets the music volume
  notMatch(elements);
  startTimer();
}

// –ó–∞–ø—É—Å–∫ –≥—Ä–∏ | Starts the game
function game() {
  var h1 = document.querySelector('h1'); // –æ—Ç—Ä–∏–º—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ | gets the title
  h1.textContent = `–†—ñ–≤–µ–Ω—å ${level[0]}x${level[1]}`; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ | sets the title text
  const letterArray = []; // –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ª—ñ—Ç–µ—Ä | array for storing letters
  generArrLetter(letterArray); // –≥–µ–Ω–µ—Ä—É—î –º–∞—Å–∏–≤ –ª—ñ—Ç–µ—Ä | generates an array of letters
  shuffle(letterArray); // –ø–µ—Ä–µ–º—ñ—à—É—î –º–∞—Å–∏–≤ –ª—ñ—Ç–µ—Ä | shuffles the letter array
  spawnElemts(letterArray); // —Å—Ç–≤–æ—Ä—é—î –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –¥–æ—à—Ü—ñ | creates elements on the board
  mainInGame(elements); // –∑–∞–ø—É—Å–∫–∞—î –æ—Å–Ω–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É –≥—Ä–∏ |  runs the main game logic
}

function restartGame() {
  board.innerHTML = "";

  const resultBlock = document.querySelector('.record');
  if (resultBlock) resultBlock.remove();

  score = 0;
  timeLeft = 420;
  selected = [];

  scoreElement[0].textContent = "–†–∞—Ö—É–Ω–æ–∫: 0";
  document.getElementById("timer").textContent = "07:00";

  // ‚úÖ –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω—ñ–≤ | Shows all level buttons
  for (let i = 0; i < buttons.length; i++) {
    buttons[i].style.display = 'inline-block';
  }

  // ‚úÖ –ü–æ–∫–∞–∑—É—î–º–æ —Å–∞–º –±–ª–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Ä—ñ–≤–Ω—ñ–≤ | Shows the block with level buttons
  document.querySelector('.level-buttons').style.display = 'block';

  playButton[0].style.display = 'none';
}
